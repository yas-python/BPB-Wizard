name: Build and Release

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, arm, 386]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: 386
      fail-fast: false

    steps:
      # ----------------------------
      # Checkout the repository
      # ----------------------------
      - name: Check out code
        uses: actions/checkout@v4

      # ----------------------------
      # Setup Go
      # ----------------------------
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "^1.25"

      # ----------------------------
      # Read version from VERSION file
      # ----------------------------
      - name: Read version
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      # ----------------------------
      # Build for each GOOS/GOARCH
      # ----------------------------
      - name: Build and zip
        run: |
          mkdir -p dist
          OUTPUT="dist/BPB-Wizard-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          echo "Building for ${{ matrix.goos }}-$GOARCH -> $OUTPUT"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GO111MODULE=on CGO_ENABLED=0 \
          go build -trimpath -ldflags "-X main.VERSION=${{ env.VERSION }}" -o "$OUTPUT" ./...
          echo "Build finished: $OUTPUT"

      # ----------------------------
      # Read release notes from RELEASE.md
      # ----------------------------
      - name: Read release note
        id: read_release
        shell: bash
        run: |
          r=$(cat RELEASE.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT

      # ----------------------------
      # Upload release assets
      # ----------------------------
      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          overwrite: true
          file_glob: true
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          promote: ${{ github.ref == 'refs/heads/main' }}
          body: ${{ steps.read_release.outputs.RELEASE_BODY }}
